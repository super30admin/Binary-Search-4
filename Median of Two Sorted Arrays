class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        c = (len(nums2) - len(nums1))//2
        L = len(nums1) + len(nums2)
        x = 0
        y = 2 * len(nums1)
        if len(nums1) == len(nums2):
            y -= 1
        while x <= y:
            m = (x + y) // 2
            i = m // 2
            j = len(nums2)-1 - (c + m // 2)
            if m&1:
                if (nums2[j - 1] if j > 0 else -inf) <= nums1[i] <= nums2[j]:
                    break
                elif nums1[i] > nums2[j]:
                    y = m - 1
                else:
                    x = m + 1
            else:
                if (nums1[i - 1] if i > 0 else -inf) <= nums2[j] <= (nums1[i] if i < len(nums1) else inf):
                    break
                elif nums2[j] > (nums1[i] if i < len(nums1) else inf):
                    x = m + 1
                else:
                    y = m - 1
        if m&1:
            median = nums1[i]
            if not L&1:
                median = (median + min(nums2[j], nums1[i+1] if i+1 < len(nums1) else inf))/2
        else:
            median = nums2[j]
            if not L&1:
                median = (median + min(nums1[i] if i < len(nums1) else inf, nums2[j+1] if j+1<len(nums2) else inf))/2
        return median
    
# Time Complexity: O(log(min(m,n)))
# Space Complexity: O(1)
# Successfully implemented on Leetcode
