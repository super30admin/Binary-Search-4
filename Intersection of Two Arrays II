#time complexity: O(mlogm+nlogn+mlogn)
#space complexity: O(1)
#did it run on leetcode: yes
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        m,n=len(nums1),len(nums2)
        if m>n: return self.intersect(nums2,nums1)
        result = []
        nums1.sort()
        nums2.sort()
        low,high = 0, n-1
        for i in range(m):
            target = nums1[i]
            bsIdx = self.binarySearch(nums2,low,high,target)
            if bsIdx != -1:
                low = bsIdx + 1
                result.append(target)
        return result

    def binarySearch(self, nums: List[int], low: int, high: int, target: int):
        while(low<=high):
            mid = low+ (high-low)//2
            if nums[mid]==target:
                if mid ==low or nums[mid-1]<nums[mid]:
                    return mid
                else:
                    high = mid-1
            elif nums[mid]>target:
                high = mid-1
            else:
                low= mid+1
        return -1


