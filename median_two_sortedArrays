//TimeComplexity. O(log(l1))
//spaceComplexity O(1)


class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       
      
        double median = 0;
       int l1 = nums1.length;
       int l2 = nums2.length;

         if(l1 > l2){
            return findMedianSortedArrays(nums2,nums1);
        }

       int low = 0;
       int high = l1;

       while(low <= high){

           int mid1 = low + (high - low)/2;
           int mid2 = (l1+l2)/2-mid1;


           double left1 = mid1 == 0 ? Integer.MIN_VALUE : nums1[mid1-1];
           double right1 = mid1 == l1 ? Integer.MAX_VALUE : nums1[mid1];
           double left2 = mid2 == 0 ? Integer.MIN_VALUE : nums2[mid2-1];
           double right2 =  mid2 == l2 ? Integer.MAX_VALUE : nums2[mid2];

            

            if(left1 <= right2 && left2 <= right1){
                if((l1+l2)%2 == 0){
                    return (Math.min(right1,right2) + Math.max(left1,left2))/2;
                }else{
                    return Math.min(right1,right2);
                }
            }else if(left1 > right2){
                high = mid1 - 1;
            }else{
                low = mid1 + 1;
            }

       }

       return median;
            
        }
    }
