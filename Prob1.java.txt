class Solution {
    
    List<Integer> result = new ArrayList<>();
    
    public int[] intersect(int[] nums1, int[] nums2) {
        
        
        if(nums1 == null || nums2 == null || nums1.length==0 || nums2.length==0)
            return new int[0];
        
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int low =0;
        if(nums1.length > nums2.length) return intersect(nums2,nums1);
            
            for(int i=0;i<nums1.length;i++){
                
                int index = binarySearch(nums2,low,nums2.length-1,nums1[i]);
                if(index != -1){
                    low = index+1;
                }
            }
        
        
        int[] intersection = new int[result.size()];
        int i=0;
        for( int num : result){
            intersection[i++] = num;
        }
        return intersection;
        
    }
    
    private int binarySearch(int[] nums,int low,int high,int target){
        //int l = low;
        while(low <= high){
            int mid = low+(high-low)/2;
            
            if(nums[mid] == target){
                if(mid==low || nums[mid-1] != nums[mid]){
                    result.add(nums[mid]);
                    return mid;
                }else{
                    high = mid-1;
                }
            }else if(nums[mid] < target){
                low= mid+1;
            }else{
                high = mid-1;
            }
        }
        return -1;
    }
    
    
}