//HashMap
//TimeComplexity. O(m+n)
//Spacecomplexity O(m)

class Solution {
    List<Integer> list = new ArrayList<>();
    public int[] intersect(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;

        if(len1 > len2){
            helper(nums1,nums2);
        }else{
            helper(nums2,nums1);
        }
        int i = 0;
        int[] arr = new int[list.size()];
            for(int num : list){
                arr[i] = num;
                i++;
            }
        return arr;
    }

    private void helper(int[] nums1, int[] nums2){
        HashMap<Integer,Integer> map = new HashMap<>();

        for(int num : nums1){
            map.put(num,map.getOrDefault(num,0)+1);
        }
        
        for(int num : nums2){
            if(map.containsKey(num) && map.get(num) > 0){
               list.add(num);
               map.put(num, map.get(num)-1);
            }
        }
    }
}

//Two Pointers
//TimeComplexity. O(mlogm+nlogn)
//Spacecomplexity   O(1)

class Solution {
   
    public int[] intersect(int[] nums1, int[] nums2) {
      
      Arrays.sort(nums1);
      Arrays.sort(nums2);
       
      int i = 0;
      int j = 0;
      int k = 0;

      while(i < nums1.length && j < nums2.length){
          if(nums1[i] == nums2[j]){
              nums1[k++] = nums1[i];
              i++;
              j++; 
          }else if(nums1[i] > nums2[j]){
              j++;
          }else{
              i++;         
          }
      }

      int l = 0;
      int[] result = new int[k];
      for( i = 0; i < k; i++){
          result[l++] = nums1[i];
      }
      return result;
          }
}

//Binary Search
//TimeComplexity. O(nlogm)
//Spacecomplexity O(1)

class Solution {
   List<Integer> list = new ArrayList<>();
    public int[] intersect(int[] nums1, int[] nums2) {
      
 

      if(nums1.length > nums2.length){
          return intersect(nums2,nums1);
      }

     Arrays.sort(nums1);
      Arrays.sort(nums2);
       
       int low = 0;
       int high = nums2.length - 1;

        for(int num : nums1){
           
           int val = binarySearch(low, high, nums2, num);
           if(val != -1){
               
               low = val+1;
               list.add(num);
           }
           
        }
        int[] arr = new int[list.size()];
        int k = 0;
            for(int num : list){
                arr[k++] = num;
            } 
            return arr;    
          }

          private int  binarySearch(int low, int high,int[] nums, int num){

              while(low <= high){

                  int mid = low + (high - low)/2;

                  if(nums[mid] == num){

                        if(mid == low || nums[mid-1] < nums[mid]){
                            return mid;
                        }else{
                            high = mid - 1;
                        }
                  }else if(nums[mid] < num){
                        low = mid+1;
                  }else{
                        high = mid - 1;
                  }
              }
              return -1;
          }
}
