class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int n1 = nums1.length;
        int n2 = nums2.length;
        
        if(n1 > n2){
        return findMedianSortedArrays(nums2, nums1);
        }
        
        int t = (n1+n2);
        int halfEle = t/2;
        
        int s=0, e=n1;
        
        while(s<=e){
            
            int partAsize = s + (e-s)/2;   //mid of 1st arr
            int partBsize = halfEle - partAsize;
            
            int l1 = partAsize==0 ? Integer.MIN_VALUE : nums1[partAsize-1];
            int l2 = partBsize==0 ? Integer.MIN_VALUE : nums2[partBsize-1];
            
            int r1 = partAsize==n1 ? Integer.MAX_VALUE : nums1[partAsize];
            int r2 = partBsize==n2 ? Integer.MAX_VALUE : nums2[partBsize];
            
            if(l1<=r2 && l2<=r1){
                
                int l = Math.max(l1, l2);
                int r = Math.min(r1, r2);
                
                if(t%2==0){
                    return (l+r)/2.0;
                }else{
                    return r;
                }
                
            }else if(l1>r2){
                e = partAsize-1;
            }else{
                s = partAsize+1;
            }
        }
        
        return -1;
    }
}
