//350. Intersection of Two Arrays II
//Binary search solution
//  TC=O(nlogm) SC =O(1)
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        int m=nums1.length;
        int n=nums2.length;
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        if(m>n)return intersect(nums2,nums1);
        List<Integer> li=new ArrayList<>();
        int low=0,high=n-1;
           for(int i=0;i<m;i++){
               int target=nums1[i];
               int res=binarySearch(nums2,low,high,target);
               if(res!=-1){
                   li.add(target);
                   low=res+1;
               }
           }


        int[] result=new int[li.size()];
        for(int i=0;i<li.size();i++){
            result[i]=li.get(i);
        }
        return result;
    }
    private int binarySearch(int []nums2,int low,int high,int target){
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums2[mid]==target){
                if(mid==low || nums2[mid]!=nums2[mid-1]){
                    return mid;
                }else{
                    high=mid-1;
                }
            }
            else if(nums2[mid]>target){
                    high=mid-1;
                }else{
                    low=mid+1;
                }
        }
        return -1;
    }
}



// //Two pointer solution

// class Solution {
//     public int[] intersect(int[] nums1, int[] nums2) {
//         int m=nums1.length;
//         int n=nums2.length;
//         Arrays.sort(nums1);
//                 Arrays.sort(nums2);
//         if(m>n)return intersect(nums2,nums1);
//         List<Integer> li=new ArrayList<>();
//         int p1=0,p2=0;
//         while(p1<m && p2<n){
//             if(nums1[p1]==nums2[p2]){
//                 li.add(nums1[p1]);
//                 p1++;p2++;
//             }else if(nums1[p1]<nums2[p2]){
//                 p1++;
//             }else{
//                 p2++;
//             }
//         }    



//         int[] result=new int[li.size()];
//         for(int i=0;i<li.size();i++){
//             result[i]=li.get(i);
//         }
//         return result;
//     }
// }



////Hashmap solution
// class Solution {
//     public int[] intersect(int[] nums1, int[] nums2) {
//         int m=nums1.length;
//         int n=nums2.length;
//         if(m>n)return intersect(nums2,nums1);
//         List<Integer> li=new ArrayList<>();
//         HashMap<Integer,Integer>map=new HashMap<>();
//         for(int el:nums1){
//             map.put(el,map.getOrDefault(el,0)+1);
//         }
//         for(int el:nums2){
//             if(map.containsKey(el)){
//                 li.add(el);
//                 map.put(el,map.get(el)-1);
//                 map.remove(el,0);
//             }
//         }
//         int[] result=new int[li.size()];
//         for(int i=0;i<li.size();i++){
//             result[i]=li.get(i);
//         }
//         return result;
//     }
// }