{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15260\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
class Solution:\
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\
        n1 = len(nums1)\
        n2 = len(nums2)\
        result = []\
        if n1 > n2:\
            return self.intersect(nums2, nums1)\
        \
        nums1.sort()\
        nums2.sort()\
        \
        def search(l, h, n):\
            \
            while l <= h:\
                mid = (l + h) // 2\
                \
                if nums2[mid] == n:\
                    if mid == l or nums2[mid] > nums2[mid - 1]:\
                        return mid\
                    else:\
                        h = mid - 1\
                        \
                elif nums2[mid] > n:\
                    h = mid - 1\
                    \
                else:\
                    l = mid + 1\
            return -1\
        \
        low = 0\
        high = len(nums2) - 1\
        for n in nums1:\
            x = search(low, high, n)\
            \
            if x != -1:\
                low = x + 1\
                result.append(n)\
        return result}