Intersection of Two Arrays II
#tc: O(n)
#sc: O(n)
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
            # Output that we want to return
            output = []
            
            # To keep the count of each element in nums2
            count = Counter(nums2)
            
            # Now for each element in first array
            for num in nums1:
                # If count of that element is > 0 we can include it
                if num in count and count[num] > 0:
                    output.append(num)
                    # Reduce its count by 1 as we included this element once in the output
                    count[num] -= 1
     
            return output
    
        
Median of Two Sorted Arrays
#tc: O(logn)
#sc: O(1)
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        n1 = len(nums1);   n2 = len(nums2) 
        if n1 > n2: return self.findMedianSortedArrays(nums2, nums1) 
        
        INT_MIN, INT_MAX = -2**64, 2**64  
        low = 0;   high = n1  
        
        
        while low <= high:
            
           
            cut1 = (low + high) // 2          
            cut2 = (n1 + n2 + 1) // 2 - cut1 
            
            # GET THE 4 BOUNDARY NUMBERS
            left1 = nums1[cut1-1] if cut1 > 0 else INT_MIN   
            right1 = nums1[cut1] if cut1 < n1 else INT_MAX   
            
            left2 = nums2[cut2-1] if cut2 > 0 else INT_MIN   
            right2 = nums2[cut2] if cut2 < n2 else INT_MAX  
            
            
            if left1 <= right2 and left2 <= right1:  
                if (n1 + n2) % 2 == 0:
                    return (max(left1, left2) + min(right1, right2)) / 2
                else:
                    return max(left1, left2)
            
            
            elif left1 > right2:
                high = cut1 - 1
                
              
            else:
                low = cut1 + 1
        
        return 0.0  
