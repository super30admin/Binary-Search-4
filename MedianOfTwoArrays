//Time Compleity - o(min(m,n)) bcs we are doing binary search on small array
//Space complexity - o(1)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int n1 = nums1.length , n2 = nums2.length;
        //need to do n=binary search on smaller array
        if(n1>n2)
            return findMedianSortedArrays(nums2,nums1);
        //remember it is partition , not index num
        int low = 0, high= n1;
        
        while(low<=high){
            //remember it is partition , not index num
            int partX = low+(high-low)/2;
            int partY = (n1+n2)/2-partX;
            double l1 = (partX==0)?Integer.MIN_VALUE:nums1[partX-1];
            double r1 = (partX==n1)?Integer.MAX_VALUE:nums1[partX];
            double l2 = (partY==0)?Integer.MIN_VALUE:nums2[partY-1];
            double r2 = (partY==n2)?Integer.MAX_VALUE:nums2[partY];
            
            if(l2>r1) {
                low = partX+1;
            } else if(l1>r2) {
                high = partX-1;
            } else {
                //if even return avg
                if((n1+n2)%2== 0){
                    return (Math.max(l1,l2)+ Math.min(r1,r2))/2;
                } 
                //else right side has more elements
                //so min of that
                else{
                    return Math.min(r1,r2);
                }
            }
                
        }
        return -1;
    }
}