/*
TC: O(mlogn)
SC: Constant
 */

class Intersection{
    public int[] intersect(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;

        if (n1 > n2){
            return intersect(nums2,nums1);
        }

        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int low = 0;
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums1.length; i++){
            int bIndex = binarySearch(nums2,nums1[i],low,n2-1);
            if (bIndex != -1){
                list.add(nums1[i]);
                low = bIndex+1;
            }
        }

        int arr[] = new int[list.size()];
        for (int i = 0; i < list.size(); i++){
            arr[i] = list.get(i);
        }

        return arr;
    }

    private int binarySearch(int[] num, int target, int low, int high){
        while(low <= high){

            int mid = low + (high-low)/2;

            if (num[mid] == target){

                if (mid == low || num[mid] > num[mid-1]){
                    return mid;
                }
                else{
                    high = mid-1;
                }

            }
            else if (num[mid] > target){
                high = mid -1;
            }
            else{
                low = mid+1;
            }
        }
        return -1;
    }
}